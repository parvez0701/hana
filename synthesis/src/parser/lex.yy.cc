#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 132
#define YY_END_OF_BUFFER 133
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[815] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   93,   93,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  133,  131,    3,    4,
       41,   42,   41,  131,   41,  131,   41,   41,   41,   41,
       41,   84,   41,   41,   41,   77,   77,  131,   41,  131,
       77,   77,   77,   41,   41,    3,   41,  131,    9,   10,
        9,  132,    6,    7,   46,   44,   45,   46,   41,   41,
       41,   71,   41,   63,   66,   65,   64,   69,   70,   67,
       68,   70,   93,   94,   14,   13,   14,   88,   89,   88,
      130,  128,  130,  119,  118,  119,  119,  112,  111,   26,

       79,   30,    0,    0,    0,    0,    0,   15,   16,   40,
       24,   37,   38,   36,    8,    5,    0,   84,    0,   17,
       21,   25,   23,   22,   19,   77,   77,   78,   34,  126,
      127,  127,  127,   77,   77,   77,   29,   35,   33,   32,
        0,    0,    0,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,   11,   43,    0,    0,    0,    0,
        0,   93,    0,   88,   88,  128,  129,    0,    0,    0,
        0,   28,   31,    0,   81,    0,   80,    0,   83,    0,
       82,    0,   39,    5,   85,    0,   86,   18,   27,   20,
       77,  127,  127,  127,   77,   77,   77,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   87,
      129,    0,    0,    0,   80,   85,    0,   86,   77,  127,
      127,   77,   77,   77,   77,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  127,
      127,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,   51,   56,
       52,   57,   59,   58,   47,   48,   50,   49,   60,   61,

       62,   54,   55,   53,    0,    0,    0,    0,    0,    0,
       85,   77,  127,  127,   77,   77,   77,   77,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  127,  127,  127,  127,
      123,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  127,  127,  127,  127,  127,  127,  127,    0,  116,
        0,    0,    0,    0,   85,   77,  127,  127,   77,   77,
       77,   75,    0,    0,    0,    0,  123,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  127,  127,  127,  127,  127,  127,  127,

      124,  127,  127,  127,    0,  127,  127,  127,  127,  127,
      127,  127,  125,  127,    0,    0,  117,    0,    0,   77,
      127,  127,   77,   77,   77,    0,    0,    0,    0,    0,
        0,    0,  124,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  127,  110,  127,  127,  122,
      127,  127,  127,  120,  127,    0,  127,  127,  127,  127,
      127,  127,  127,  125,  125,  125,  109,    0,  115,  113,
        0,   77,  127,   90,   77,   77,   73,    0,  110,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  109,    0,    0,  127,  110,  110,  110,  127,

      127,  122,  122,  127,  127,  127,  120,  120,  121,    0,
      127,  127,  105,  127,  127,  127,  127,  109,  109,  109,
        0,  115,  115,  113,  113,  114,   77,  127,   72,   77,
        0,    0,    0,    0,    0,    0,    0,    0,  105,    0,
        0,    0,    0,    0,  127,  127,  127,  127,  127,  127,
      121,  121,    0,  127,  127,  105,  105,  105,  106,  127,
      127,  127,   12,  114,  114,   77,  127,   77,    0,    0,
        0,    0,    0,    0,    0,    0,  106,    0,    0,    0,
        1,  127,  127,  127,  127,  127,  127,    0,    2,  127,
      127,  106,  106,  106,  127,   92,  127,   76,  127,   74,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   92,
        0,    1,    1,   95,  127,  127,  127,  127,  102,    2,
      127,  127,  127,  127,   76,   76,  127,   95,    0,    0,
        0,    0,  102,    0,    0,    0,    0,   95,   95,   95,
      127,  127,  127,  127,  102,  102,  102,  127,  127,  127,
      127,   76,  127,    0,    0,    0,    0,    0,    0,    0,
        0,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,   76,   76,  127,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  127,  127,  127,  127,  127,  101,
      127,  127,  127,  127,   76,  127,    0,    0,    0,    0,

        0,  101,    0,    0,    0,    0,  127,  127,  127,  127,
      127,  101,  101,  101,  127,  127,  127,  127,   91,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  127,   98,
       97,  127,  127,  127,  127,  107,  127,    0,   98,   97,
        0,    0,    0,    0,  107,    0,  127,   98,   98,   98,
       97,   97,   97,  127,  127,  127,  127,  107,  107,  107,
      127,    0,    0,    0,    0,    0,    0,  127,  127,  100,
      103,  127,  108,    0,    0,  100,  103,    0,  108,  127,
       99,  100,  100,  100,  103,  103,  103,  127,  108,  108,
      108,    0,   99,    0,  127,   99,   99,   99,  104,    0,

      104,  127,  104,  104,  104,    0,  127,    0,   96,   96,
       96,   96,   96,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   10,   17,   18,   19,   20,   21,   22,
       22,   22,   22,   22,   22,   23,   23,   24,   25,   26,
       27,   28,   29,   10,   30,   31,   32,   33,   34,   35,
       36,   37,   36,   36,   36,   38,   36,   39,   40,   41,
       36,   42,   43,   44,   45,   36,   36,   46,   36,   47,
       10,   48,   10,   49,   50,   51,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   36,   36,   61,   62,   63,
       64,   65,   36,   66,   67,   68,   69,   70,   36,   46,
       71,   47,   10,   72,   10,   73,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[74] =
    {   0,
        1,    2,    3,    4,    3,    1,    1,    1,    5,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    6,
        6,    6,    6,    1,    1,    1,    1,    1,    7,    8,
        8,    8,    8,    8,    8,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    8,    8,    1,    1,    8,
        1,    8,    8,    8,    8,    8,    8,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    1,    1
    } ;

static yyconst flex_int16_t yy_base[886] =
    {   0,
        0,   72,   72,   74,    0,    0, 1641, 1640,   77,   78,
      114,   88, 1639, 1638,    0,    0,   82,   84,   95,  101,
      180,    0, 1637,  107,   88,   90, 1640, 3658, 3658, 3658,
     1612, 3658, 3658,    0, 1621,  223, 1616,  102, 1606,   55,
       99,  247,   93,   94,  105,    0, 1599,    0, 1545,  256,
     1544, 1544, 1550, 1533,  246,  269, 1543,  319, 3658, 3658,
     1584, 3658, 3658, 3658, 3658, 3658, 3658, 1595,  264,  122,
      100,  278, 3658,    0,    0,    0,    0,    0, 1571,    0,
        0,    0,    0, 3658, 3658, 3658, 1537,    0, 3658,    0,
     3658,    0,    0, 3658, 3658,  286,   86, 3658, 3658, 1572,

        0, 1587,  310,  320,  154,  343,  361,  160, 3658, 3658,
     3658, 3658, 3658, 3658, 3658,    0,  284,  384,  406, 1571,
     3658, 1569, 3658, 3658, 1567,    0, 1550,    0, 3658,  167,
        0, 1537, 1529, 1523, 1535, 1526, 3658, 3658, 3658, 3658,
      330,  376, 1528, 1530,   88,  103,   38, 1523, 1518, 1515,
     1524, 1510, 1518,  210, 3658, 3658,  273,  263,  324,  329,
      306,    0, 1522,    0, 1569,    0,    0,  364,  291,  115,
     1518, 3658, 3658,  430,  417,  449,  435,  259,  333,  470,
      475,  394, 3658,    0,  480,  389,  461, 3658, 3658, 3658,
     1537,    0, 1516, 1518, 1507, 1512,   91, 1513,  299,  315,

     1511, 1503, 1500, 1503, 1489, 1497,  328, 1493, 1484,  356,
     1473, 1467,  316,  299, 1470,  352, 1468, 1464, 1465, 1467,
      393, 1472, 1513, 1512, 1511, 1510, 1509, 1508, 1507, 1506,
     1505, 1504, 1503, 1502, 1501, 1499, 1496, 1495, 1446, 1500,
        0, 1439, 1450,  398,  485,  506,  521,  511, 1463, 1451,
     1441, 1439, 1444, 1433, 1446, 1436,  405, 1429, 1428,  348,
      405,  419, 1430, 1426, 1421, 1423, 1430, 1427, 1416, 1406,
      427, 1409, 1408,  418, 1406,  458, 1402, 1402, 1400, 1386,
     1391, 1385, 1396, 1386, 1394, 1385, 1392, 1386, 3658, 3658,
     3658, 3658, 3658, 3658, 3658, 3658, 3658, 3658, 3658, 3658,

     3658, 3658, 3658, 3658, 1382,  433, 1385, 1388, 1388,  525,
      529, 1397, 1371, 1368, 1384, 1372, 1382, 1367, 1371, 1371,
     1378, 1377,  438, 1375,  459, 1371, 1371, 1356, 1361, 1355,
     1366, 1356, 1364, 1349, 1351, 1406, 1355, 1336, 1323, 1335,
        0, 1330, 1325, 1329, 1327, 1317, 1325, 1325, 1375, 1314,
     1324, 1321, 1308, 1309, 1307, 1310, 1315, 1311, 1315, 3658,
     1312, 1310, 1307, 1307,  537, 1324, 1300, 1305, 1291, 1302,
     1289,    0, 1301, 1292, 1283, 1300, 3658, 1295, 1290, 1294,
     1292, 1282, 1290, 1284, 1274, 1284, 1281, 1258, 1255, 1248,
     1251, 1253,  548, 1256, 1255, 1260, 1248,  561, 1252, 1246,

        0, 1242,  565, 1248,  560, 1239, 1239, 1248, 1249, 1244,
     1245, 1235,  587, 1244, 1227,  569, 3658,  573, 1237, 1248,
     1222, 1233, 1228, 1221, 1230, 1229, 1228, 1233, 1221,  605,
     1225, 1219, 3658, 1215,  615, 1221, 1212, 1212, 1221, 1222,
     1211, 1212, 1202, 1211, 1246, 1191,  660, 1180, 1185,  619,
     1190, 1178, 1170,  623,  627,  622, 1171, 1173, 1167, 1173,
     1166, 1180, 1175,    0,  644,  733,  806, 1169,  648,  652,
      678, 1195, 1178,    0, 1173, 1174,    0, 1168,  688, 1162,
     1167, 1171, 1157, 1149,  692, 1150, 1152, 1146, 1152, 1145,
     1159, 1154,  696, 1202, 1203, 1147,    0,  700,  879, 1142,

     1155,    0,  710, 1139, 1148, 1146,    0,  714,  718,  579,
     1145, 1131,  952, 1132, 1125, 1130, 1126,    0,  722, 1025,
     1119,    0,  726,    0,  751,  761, 1160, 1105,    0, 1099,
     1106, 1101, 1114, 1098, 1107, 1105, 1104, 1096,  765, 1097,
     1090, 1095, 1101,  766, 1091, 1098, 1087, 1087, 1094, 1094,
        0,  770, 1138, 1077, 1087,    0,  774, 1098, 1171, 1092,
     1085, 1072, 3658,    0,  788,  774, 1083, 1082, 1074, 1081,
     1070, 1070, 1077, 1078, 1064, 1074,  796, 1079, 1072, 1053,
      806, 1064, 1063, 1054, 1041, 1045, 1028, 1088,    0, 1027,
     1039,    0,  834, 1244, 1035,    0, 1035, 1081, 1021,    0,

     1032, 1031, 1022, 1019, 1027, 1015, 1015, 1027, 1023, 3658,
     1023,    0,  820, 1317, 1028, 1011, 1007, 1012, 1390,    0,
     1021, 1002, 1017, 1013,  829, 1058,  998,  842, 1015,  998,
      995, 1002,  856, 1011,  992, 1007, 1003,    0,  860, 1463,
      554,  989,  999,  992,    0,  864, 1536,  991,  991,  977,
      995, 1025,  958,  627,  954,  961,  951,  953,  950,  933,
      949,  938,  944,  929,  931,  932,  918,  909,  901,  888,
      890,  851,  932,  872,  873,  877,  863,  868,  871,  863,
      863,  856,  840,  833,  816,  809,  816,  823,  801, 1609,
      799,  814,  788,  787,  839,  790,  748,  742,  744,  751,

      733,  897,  731,  742,  717,  714,  710,  715,  701,  696,
      694,    0,  907, 1682,  681,  682,  663,  666,    0,  654,
      659,  646,  641,  646,  645,  649,  633,  609,  598, 1755,
     1828,  597,  588,  584,  582, 1901,  571,  574,  911,  915,
      578,  569,  566,  567,  919,  561,  536,    0,  929, 1974,
        0,  933, 2047,  523,  518,  510,  513,    0,  937, 2120,
      513,  494,  471,  448,  443,  449,  409,  396,  357, 2193,
     2266,  313, 2339,  324,  294,  941,  945,  259,  970,  245,
     2412,    0,  980, 2485,    0,  984, 2558,  252,    0,  988,
     2631,  217,  992,  224,  207,    0, 1002, 2704, 2777,  187,

     1006,  112,    0, 1010, 2850,   98,   86,   52, 2923, 1014,
        0, 1018, 2996, 3658, 3069, 3078, 3087, 3096, 3105, 3114,
     3123, 3132, 3141, 3146, 3151, 3160, 3168, 3177, 3186, 3195,
     3200, 3202, 3209, 3217, 3222, 3227, 3236, 3245, 3254, 3263,
     3272, 3281, 3290, 3299, 3308, 3317, 3326, 3335, 3344, 3353,
     3362, 3371, 3380, 3385, 3394, 3403, 3412, 3417, 3426, 3435,
     3440, 3449, 3458, 3463, 3468, 3477, 3486, 3495, 3504, 3513,
     3522, 3531, 3540, 3549, 3558, 3567, 3576, 3585, 3594, 3603,
     3612, 3621, 3630, 3639, 3648
    } ;

static yyconst flex_int16_t yy_def[886] =
    {   0,
      814,    1,  815,  815,  816,  816,  817,  817,  818,  818,
        1,   11,  819,  819,  816,  816,  820,  820,  821,  821,
      814,   21,  822,  822,  823,  823,  814,  814,  814,  814,
      814,  814,  814,  824,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  825,  825,  826,  814,  827,
      825,  825,  825,  814,  814,  814,  814,  827,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  828,  814,  814,  814,  814,  829,  814,  830,
      814,  831,  832,  814,  814,  814,  814,  814,  814,  814,

      824,  814,  814,  814,  833,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  834,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  825,  825,  826,  814,  814,
      835,  835,  835,  825,  825,  825,  814,  814,  814,  814,
      814,  814,  814,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  814,  814,  814,  814,  814,  814,
      814,  828,  814,  829,  830,  831,  836,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  833,  833,  814,
      814,  814,  814,  834,  814,  814,  814,  814,  814,  814,
      825,  835,  835,  835,  825,  825,  825,  814,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  830,
      836,  814,  814,  814,  814,  814,  814,  814,  825,  835,
      835,  825,  825,  825,  825,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  825,  835,  835,  825,  825,  825,  825,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  835,  835,  835,  835,  835,  835,  835,  814,  814,
      814,  814,  814,  814,  814,  825,  835,  835,  825,  825,
      825,  825,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  835,  835,  835,  835,  835,  835,  835,

      835,  835,  835,  835,  814,  835,  835,  835,  835,  835,
      835,  835,  837,  835,  814,  814,  814,  814,  814,  825,
      835,  835,  825,  825,  825,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  838,  835,  839,  835,  835,  840,
      835,  835,  835,  841,  835,  814,  835,  835,  835,  835,
      835,  835,  835,  842,  842,  837,  843,  814,  844,  845,
      814,  825,  835,  835,  825,  825,  825,  814,  846,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  847,  838,  814,  835,  846,  846,  839,  835,

      835,  840,  840,  835,  835,  835,  841,  841,  848,  814,
      835,  835,  849,  835,  835,  835,  835,  847,  847,  843,
      814,  844,  844,  845,  845,  850,  825,  835,  825,  825,
      814,  814,  814,  814,  814,  814,  814,  814,  851,  814,
      814,  814,  814,  814,  835,  835,  835,  835,  835,  835,
      848,  848,  852,  835,  835,  851,  851,  849,  853,  835,
      835,  835,  814,  850,  850,  854,  835,  825,  814,  814,
      814,  814,  814,  814,  814,  814,  855,  814,  814,  814,
      856,  835,  835,  835,  835,  835,  835,  852,  857,  835,
      835,  855,  855,  853,  835,  835,  835,  858,  835,  825,

      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  856,  856,  859,  835,  835,  835,  835,  860,  857,
      835,  835,  835,  835,  861,  858,  835,  862,  814,  814,
      814,  814,  863,  814,  814,  814,  814,  862,  862,  859,
      835,  835,  835,  835,  863,  863,  860,  835,  835,  835,
      835,  864,  835,  814,  814,  814,  814,  814,  814,  814,
      814,  835,  835,  835,  835,  835,  835,  835,  835,  835,
      835,  865,  864,  835,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  835,  835,  835,  835,  835,  866,
      835,  835,  835,  835,  864,  835,  814,  814,  814,  814,

      814,  867,  814,  814,  814,  814,  835,  835,  835,  835,
      835,  867,  867,  866,  835,  835,  835,  835,  835,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  835,  868,
      869,  835,  835,  835,  835,  870,  835,  814,  871,  872,
      814,  814,  814,  814,  873,  814,  835,  871,  871,  868,
      872,  872,  869,  835,  835,  835,  835,  873,  873,  870,
      835,  814,  814,  814,  814,  814,  814,  835,  835,  874,
      875,  835,  876,  814,  814,  877,  878,  814,  879,  835,
      880,  877,  877,  874,  878,  878,  875,  835,  879,  879,
      876,  814,  881,  814,  835,  881,  881,  880,  882,  814,

      883,  835,  883,  883,  882,  814,  835,  814,  884,  885,
      885,  885,  884,    0,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814
    } ;

static yyconst flex_int16_t yy_nxt[3732] =
    {   0,
       28,   29,   29,   30,   29,   31,   32,   33,   34,   33,
       35,   36,   37,   33,   38,   39,   40,   33,   41,   42,
       42,   42,   42,   33,   33,   43,   44,   45,   33,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       47,   46,   46,   46,   46,   46,   46,   48,   49,   46,
       50,   51,   46,   46,   46,   52,   46,   53,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   54,   55,   56,   56,   60,   56,   60,  113,   57,
       66,   66,  114,   67,   67,   86,   61,   86,   61,   56,
       56,   62,   56,   62,  214,   57,   62,   62,   89,   62,

      194,   90,   62,   62,   89,   62,  810,   90,   96,   96,
       95,   96,   99,  115,   99,  109,  110,  116,  120,  121,
      122,  123,   58,  113,   68,   68,   69,  114,   70,  111,
       71,  124,  125,   72,   72,  109,  110,   87,   58,   87,
      809,  170,   73,  210,   74,  171,  254,  211,   75,  111,
       76,   77,   78,  808,   79,   80,  178,   97,  178,   81,
      255,  182,  182,  212,  182,  213,   74,  807,  130,  130,
       75,  130,   76,  183,   77,  242,   78,  243,   82,   80,
       91,   91,   91,   62,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,

       91,   91,   91,   91,   91,   91,   91,   91,   91,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   91,   91,   92,
       93,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   91,   91,  103,  806,  104,  138,  130,  130,  105,
      130,  178,  106,  178,  117,  107,  118,  118,  118,  118,
      141,  141,  221,  141,  802,  103,  222,  104,  108,  801,
      119,  105,  226,  157,  158,  800,  106,  168,  168,  107,
      168,  227,  159,  223,  139,  117,  118,  118,  118,  118,

      118,  224,  119,  185,  185,  185,  185,  799,  228,  160,
      132,  119,  174,  795,  174,  133,  161,  140,  225,  142,
      130,  130,  176,  130,  176,  236,  237,  118,  794,  175,
      175,  141,  141,  119,  141,  814,  169,  814,  175,  177,
      177,  177,  177,  229,  230,  180,  170,  180,  233,  234,
      171,  238,  231,  277,  257,  175,  175,  235,  258,  175,
      793,  278,  181,  181,  181,  168,  168,  275,  168,  232,
      276,  181,  144,  145,  146,  259,  792,  260,  147,  148,
      142,  149,  788,  150,  151,  152,  153,  154,  181,  181,
      267,  103,  181,  104,  268,  182,  182,  105,  182,  324,

      106,  117,  325,  118,  118,  118,  118,  183,  187,  187,
      187,  187,  271,  103,  169,  104,  272,  119,  280,  105,
      281,  186,  186,  781,  106,  187,  187,  187,  187,  198,
      199,  200,  174,  118,  174,  201,  175,  175,  202,  119,
      203,  204,  205,  206,  207,  175,  286,  287,  780,  175,
      175,  176,  308,  176,  245,  245,  245,  245,  175,  326,
      309,  320,  175,  175,  779,  321,  175,  327,  177,  177,
      177,  177,  180,  341,  180,  175,  175,  342,  313,  175,
      248,  248,  248,  248,  245,  328,  338,  329,  360,  181,
      181,  181,  361,  377,  181,  181,  181,  378,  181,  246,

      246,  246,  246,  181,  245,  245,  245,  245,  778,  777,
      248,  344,  380,  247,  776,  181,  181,  345,  381,  181,
      181,  181,  346,  382,  181,  246,  246,  246,  246,  246,
      248,  248,  248,  248,  245,  247,  310,  310,  775,  247,
      311,  311,  311,  311,  311,  311,  311,  311,  365,  365,
      365,  365,  393,  774,  445,  246,  365,  365,  365,  365,
      248,  247,  450,  450,  405,  450,  454,  454,  773,  454,
      469,  469,  772,  469,  470,  470,  771,  470,  365,  456,
      456,  456,  456,  510,  770,  553,  365,  464,  465,  465,
      769,  465,  464,  464,  464,  768,  464,  464,  464,  464,

      464,  464,  464,  464,  464,  464,  450,  450,  662,  450,
      464,  464,  464,  464,  464,  464,  454,  454,  663,  454,
      503,  503,  664,  503,  508,  508,  510,  508,  509,  509,
      767,  509,  766,  765,  464,  464,  764,  464,  763,  762,
      761,  456,  456,  456,  456,  465,  465,  757,  465,  523,
      523,  756,  523,  525,  525,  755,  525,  754,  464,  464,
      497,  498,  498,  747,  498,  497,  497,  497,  746,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  497,  526,
      526,  675,  526,  497,  497,  497,  497,  497,  497,  498,
      498,  676,  498,  509,  509,  677,  509,  519,  519,  745,

      519,  498,  498,  744,  498,  743,  742,  497,  497,  741,
      497,  503,  503,  740,  503,  508,  508,  739,  508,  552,
      552,  738,  552,  519,  519,  737,  519,  523,  523,  736,
      523,  497,  497,  464,  464,  464,  735,  464,  464,  464,
      464,  734,  464,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  525,  525,  733,  525,  464,  464,  464,  464,
      464,  464,  565,  565,  732,  565,  557,  557,  731,  557,
      544,  552,  552,  730,  552,  557,  557,  729,  557,  728,
      464,  464,  126,  464,  727,  581,  581,  581,  581,  565,
      565,  726,  565,  126,  126,  126,  126,  593,  593,  725,

      593,  724,  723,  722,  464,  464,  518,  519,  519,  721,
      519,  518,  518,  518,  720,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  518,  613,  613,  613,  613,  518,
      518,  518,  518,  518,  518,  593,  593,  625,  593,  613,
      613,  613,  613,  639,  639,  719,  639,  672,  626,  626,
      626,  626,  718,  518,  518,  717,  518,  646,  646,  672,
      646,  639,  639,  716,  639,  646,  646,  715,  646,  711,
      673,  673,  673,  673,  710,  709,  708,  518,  518,  497,
      497,  497,  707,  497,  497,  497,  497,  706,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  713,  713,

      705,  713,  497,  497,  497,  497,  497,  497,  713,  713,
      704,  713,  749,  749,  703,  749,  752,  752,  702,  752,
      759,  759,  701,  759,  700,  699,  497,  497,  698,  497,
      749,  749,  697,  749,  752,  752,  696,  752,  759,  759,
      672,  759,  783,  783,  694,  783,  786,  786,  693,  786,
      497,  497,  556,  557,  557,  692,  557,  556,  556,  556,
      691,  556,  556,  556,  556,  556,  556,  556,  556,  556,
      556,  790,  790,  690,  790,  556,  556,  556,  556,  556,
      556,  783,  783,  689,  783,  786,  786,  688,  786,  790,
      790,  687,  790,  797,  797,  686,  797,  685,  684,  556,

      556,  683,  556,  797,  797,  682,  797,  804,  804,  681,
      804,  804,  804,  680,  804,  812,  812,  679,  812,  812,
      812,  678,  812,  556,  556,  518,  518,  518,  674,  518,
      518,  518,  518,  672,  518,  518,  518,  518,  518,  518,
      518,  518,  518,  518,  671,  670,  669,  668,  518,  518,
      518,  518,  518,  518,  667,  666,  665,  661,  660,  659,
      658,  657,  656,  655,  654,  653,  625,  651,  650,  649,
      648,  644,  518,  518,  643,  518,  642,  641,  637,  636,
      635,  634,  633,  632,  631,  630,  629,  628,  627,  625,
      624,  623,  622,  621,  589,  619,  518,  518,  556,  556,

      556,  618,  556,  556,  556,  556,  617,  556,  556,  556,
      556,  556,  556,  556,  556,  556,  556,  616,  615,  614,
      611,  556,  556,  556,  556,  556,  556,  610,  609,  608,
      607,  606,  605,  604,  603,  602,  601,  600,  599,  597,
      596,  595,  591,  590,  589,  556,  556,  587,  556,  586,
      585,  584,  583,  582,  580,  579,  578,  577,  576,  575,
      574,  573,  572,  571,  570,  569,  568,  567,  566,  556,
      556,  592,  593,  593,  563,  593,  592,  592,  592,  562,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      561,  560,  559,  555,  592,  592,  592,  592,  592,  592,

      554,  550,  549,  548,  547,  546,  545,  544,  495,  543,
      542,  541,  540,  539,  538,  537,  536,  535,  592,  592,
      534,  592,  533,  532,  531,  530,  529,  528,  527,  521,
      517,  516,  515,  514,  513,  512,  511,  506,  505,  504,
      501,  500,  592,  592,  592,  592,  592,  496,  592,  592,
      592,  592,  495,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  493,  492,  491,  490,  592,  592,  592,
      592,  592,  592,  489,  488,  487,  486,  485,  484,  483,
      482,  481,  480,  479,  478,  477,  476,  475,  474,  473,
      472,  592,  592,  471,  592,  468,  467,  463,  462,  461,

      460,  459,  458,  457,  455,  453,  452,  451,  449,  448,
      447,  446,  444,  443,  442,  592,  592,  638,  639,  639,
      441,  639,  638,  638,  638,  440,  638,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  439,  438,  437,  436,
      638,  638,  638,  638,  638,  638,  435,  434,  433,  432,
      431,  430,  429,  428,  427,  426,  425,  424,  423,  422,
      421,  420,  419,  418,  638,  638,  417,  638,  416,  415,
      414,  413,  412,  411,  410,  409,  408,  407,  406,  405,
      404,  403,  402,  401,  400,  399,  398,  397,  638,  638,
      645,  646,  646,  396,  646,  645,  645,  645,  395,  645,

      645,  645,  645,  645,  645,  645,  645,  645,  645,  394,
      393,  392,  391,  645,  645,  645,  645,  645,  645,  390,
      389,  388,  387,  386,  385,  384,  383,  379,  376,  375,
      374,  373,  372,  371,  370,  369,  368,  645,  645,  367,
      645,  366,  364,  363,  362,  359,  358,  357,  356,  355,
      354,  353,  352,  351,  350,  349,  348,  347,  343,  340,
      339,  645,  645,  638,  638,  638,  337,  638,  638,  638,
      638,  336,  638,  638,  638,  638,  638,  638,  638,  638,
      638,  638,  335,  334,  333,  332,  638,  638,  638,  638,
      638,  638,  331,  330,  323,  322,  319,  318,  317,  316,

      315,  314,  313,  312,  307,  306,  240,  305,  304,  303,
      638,  638,  302,  638,  301,  300,  299,  298,  297,  296,
      295,  294,  293,  292,  291,  290,  289,  288,  285,  284,
      283,  282,  279,  274,  638,  638,  645,  645,  645,  273,
      645,  645,  645,  645,  270,  645,  645,  645,  645,  645,
      645,  645,  645,  645,  645,  269,  266,  265,  264,  645,
      645,  645,  645,  645,  645,  263,  262,  261,  256,  253,
      252,  251,  250,  249,  244,  240,  239,  220,  219,  218,
      217,  216,  215,  645,  645,  209,  645,  208,  197,  196,
      195,  194,  193,  191,  190,  189,  188,  173,  172,  163,

      127,  156,  155,  143,  137,  136,  135,  645,  645,  712,
      713,  713,  134,  713,  712,  712,  712,  129,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  127,  112,
      108,  102,  712,  712,  712,  712,  712,  712,  100,  814,
       95,   84,   84,   64,   64,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  712,  712,  814,  712,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      712,  712,  712,  712,  712,  814,  712,  712,  712,  712,
      814,  712,  712,  712,  712,  712,  712,  712,  712,  712,

      712,  814,  814,  814,  814,  712,  712,  712,  712,  712,
      712,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  712,
      712,  814,  712,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  712,  712,  748,  749,  749,  814,  749,
      748,  748,  748,  814,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  748,  814,  814,  814,  814,  748,  748,
      748,  748,  748,  748,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  748,  748,  814,  748,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  748,  748,  751,  752,
      752,  814,  752,  751,  751,  751,  814,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  751,  814,  814,  814,
      814,  751,  751,  751,  751,  751,  751,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  751,  751,  814,  751,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  751,

      751,  758,  759,  759,  814,  759,  758,  758,  758,  814,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
      814,  814,  814,  814,  758,  758,  758,  758,  758,  758,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  758,  758,
      814,  758,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  758,  758,  748,  748,  748,  814,  748,  748,
      748,  748,  814,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  748,  814,  814,  814,  814,  748,  748,  748,

      748,  748,  748,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  748,  748,  814,  748,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  748,  748,  751,  751,  751,
      814,  751,  751,  751,  751,  814,  751,  751,  751,  751,
      751,  751,  751,  751,  751,  751,  814,  814,  814,  814,
      751,  751,  751,  751,  751,  751,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  751,  751,  814,  751,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  751,  751,
      758,  758,  758,  814,  758,  758,  758,  758,  814,  758,
      758,  758,  758,  758,  758,  758,  758,  758,  758,  814,
      814,  814,  814,  758,  758,  758,  758,  758,  758,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  758,  758,  814,
      758,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  758,  758,  782,  783,  783,  814,  783,  782,  782,

      782,  814,  782,  782,  782,  782,  782,  782,  782,  782,
      782,  782,  814,  814,  814,  814,  782,  782,  782,  782,
      782,  782,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      782,  782,  814,  782,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  782,  782,  785,  786,  786,  814,
      786,  785,  785,  785,  814,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  814,  814,  814,  814,  785,
      785,  785,  785,  785,  785,  814,  814,  814,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  785,  785,  814,  785,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  785,  785,  789,
      790,  790,  814,  790,  789,  789,  789,  814,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  814,  814,
      814,  814,  789,  789,  789,  789,  789,  789,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  789,  789,  814,  789,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      789,  789,  796,  797,  797,  814,  797,  796,  796,  796,
      814,  796,  796,  796,  796,  796,  796,  796,  796,  796,
      796,  814,  814,  814,  814,  796,  796,  796,  796,  796,
      796,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  796,
      796,  814,  796,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  796,  796,  782,  782,  782,  814,  782,
      782,  782,  782,  814,  782,  782,  782,  782,  782,  782,

      782,  782,  782,  782,  814,  814,  814,  814,  782,  782,
      782,  782,  782,  782,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  782,  782,  814,  782,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  782,  782,  785,  785,
      785,  814,  785,  785,  785,  785,  814,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  814,  814,  814,
      814,  785,  785,  785,  785,  785,  785,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  814,  814,  814,  785,  785,  814,  785,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  785,
      785,  789,  789,  789,  814,  789,  789,  789,  789,  814,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      814,  814,  814,  814,  789,  789,  789,  789,  789,  789,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  789,  789,
      814,  789,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  789,  789,  796,  796,  796,  814,  796,  796,
      796,  796,  814,  796,  796,  796,  796,  796,  796,  796,
      796,  796,  796,  814,  814,  814,  814,  796,  796,  796,
      796,  796,  796,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  796,  796,  814,  796,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  796,  796,  803,  804,  804,
      814,  804,  803,  803,  803,  814,  803,  803,  803,  803,
      803,  803,  803,  803,  803,  803,  814,  814,  814,  814,

      803,  803,  803,  803,  803,  803,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  803,  803,  814,  803,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  803,  803,
      803,  803,  803,  814,  803,  803,  803,  803,  814,  803,
      803,  803,  803,  803,  803,  803,  803,  803,  803,  814,
      814,  814,  814,  803,  803,  803,  803,  803,  803,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  803,  803,  814,

      803,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  803,  803,  811,  812,  812,  814,  812,  811,  811,
      811,  814,  811,  811,  811,  811,  811,  811,  811,  811,
      811,  811,  814,  814,  814,  814,  811,  811,  811,  811,
      811,  811,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      811,  811,  814,  811,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  811,  811,  811,  811,  811,  814,

      811,  811,  811,  811,  814,  811,  811,  811,  811,  811,
      811,  811,  811,  811,  811,  814,  814,  814,  814,  811,
      811,  811,  811,  811,  811,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  811,  811,  814,  811,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  811,  811,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   83,   83,   83,   83,   83,
       83,   83,   83,   83,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   98,   98,   98,   98,   98,   98,   98,   98,   98,
      101,  101,  814,  101,  101,  126,  126,  814,  126,  126,
      128,  814,  814,  814,  128,  128,  128,  128,  128,  131,
      131,  814,  814,  814,  814,  131,  131,  162,  162,  162,
      814,  162,  162,  162,  162,  162,  164,  814,  814,  814,
      164,  164,  164,  164,  164,  165,  814,  814,  814,  165,

      165,  165,  165,  165,  166,  166,  814,  166,  166,  167,
      167,  179,  814,  814,  179,  179,  179,  184,  184,  184,
      814,  184,  184,  184,  184,  184,  192,  192,  814,  192,
      192,  241,  241,  814,  241,  241,  466,  466,  466,  814,
      466,  466,  466,  466,  466,  494,  494,  494,  494,  494,
      494,  494,  494,  494,  499,  499,  499,  814,  499,  499,
      499,  499,  499,  502,  502,  502,  814,  502,  502,  502,
      502,  502,  507,  507,  507,  814,  507,  507,  507,  507,
      507,  464,  464,  464,  814,  464,  464,  464,  464,  464,
      520,  520,  520,  814,  520,  520,  520,  520,  520,  522,

      522,  522,  814,  522,  522,  522,  522,  522,  524,  524,
      524,  814,  524,  524,  524,  524,  524,  497,  497,  497,
      814,  497,  497,  497,  497,  497,  518,  518,  518,  814,
      518,  518,  518,  518,  518,  551,  551,  551,  814,  551,
      551,  551,  551,  551,  558,  558,  558,  814,  558,  558,
      558,  558,  558,  564,  564,  564,  814,  564,  564,  564,
      564,  564,  556,  556,  556,  814,  556,  556,  556,  556,
      556,  588,  588,  588,  588,  588,  588,  588,  588,  588,
      594,  594,  594,  814,  594,  594,  594,  594,  594,  598,
      598,  814,  598,  598,  592,  592,  592,  814,  592,  592,

      592,  592,  592,  612,  612,  612,  814,  612,  612,  612,
      612,  612,  620,  620,  620,  814,  620,  620,  620,  620,
      620,  626,  626,  814,  626,  626,  640,  640,  640,  814,
      640,  640,  640,  640,  640,  647,  647,  647,  814,  647,
      647,  647,  647,  647,  652,  652,  814,  652,  652,  638,
      638,  638,  814,  638,  638,  638,  638,  638,  645,  645,
      645,  814,  645,  645,  645,  645,  645,  673,  673,  814,
      673,  673,  695,  695,  814,  695,  695,  714,  714,  714,
      814,  714,  714,  714,  714,  714,  712,  712,  712,  814,
      712,  712,  712,  712,  712,  750,  750,  750,  814,  750,

      750,  750,  750,  750,  753,  753,  753,  814,  753,  753,
      753,  753,  753,  760,  760,  760,  814,  760,  760,  760,
      760,  760,  748,  748,  748,  814,  748,  748,  748,  748,
      748,  751,  751,  751,  814,  751,  751,  751,  751,  751,
      758,  758,  758,  814,  758,  758,  758,  758,  758,  784,
      784,  784,  814,  784,  784,  784,  784,  784,  787,  787,
      787,  814,  787,  787,  787,  787,  787,  791,  791,  791,
      814,  791,  791,  791,  791,  791,  782,  782,  782,  814,
      782,  782,  782,  782,  782,  785,  785,  785,  814,  785,
      785,  785,  785,  785,  789,  789,  789,  814,  789,  789,

      789,  789,  789,  798,  798,  798,  814,  798,  798,  798,
      798,  798,  796,  796,  796,  814,  796,  796,  796,  796,
      796,  805,  805,  805,  814,  805,  805,  805,  805,  805,
      803,  803,  803,  814,  803,  803,  803,  803,  803,  813,
      813,  813,  814,  813,  813,  813,  813,  813,  811,  811,
      811,  814,  811,  811,  811,  811,  811,   27,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814
    } ;

static yyconst flex_int16_t yy_chk[3732] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    2,    3,    2,    4,   40,    2,
        9,   10,   40,    9,   10,   17,    3,   18,    4,   12,
       12,   25,   12,   26,  147,   12,   19,   19,   19,   19,

      147,   19,   20,   20,   20,   20,  808,   20,   24,   24,
       24,   24,   25,   41,   26,   38,   38,   41,   43,   43,
       44,   44,    2,   71,    9,   10,   11,   71,   11,   38,
       11,   45,   45,   11,   11,   70,   70,   17,   12,   18,
      807,   97,   11,  145,   11,   97,  197,  145,   11,   70,
       11,   11,   11,  806,   11,   11,  105,   24,  105,   11,
      197,  108,  108,  146,  108,  146,   11,  802,  130,  130,
       11,  130,   11,  108,   11,  170,   11,  170,   11,   11,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   36,  800,   36,   55,   50,   50,   36,
       50,  178,   36,  178,   42,   36,   42,   42,   42,   42,
       56,   56,  154,   56,  795,   36,  154,   36,   69,  794,
       42,   36,  158,   69,   69,  792,   36,   96,   96,   36,
       96,  158,   69,  157,   55,   72,   42,   72,   72,   72,

       72,  157,   42,  117,  117,  117,  117,  788,  158,   69,
       50,   72,  103,  780,  103,   50,   69,   55,  157,   56,
       58,   58,  104,   58,  104,  161,  161,   72,  778,  103,
      103,  141,  141,   72,  141,  179,   96,  179,  103,  104,
      104,  104,  104,  159,  159,  106,  169,  106,  160,  160,
      169,  161,  159,  214,  199,  103,  103,  160,  199,  103,
      775,  214,  106,  106,  106,  168,  168,  213,  168,  159,
      213,  106,   58,   58,   58,  200,  774,  200,   58,   58,
      141,   58,  772,   58,   58,   58,   58,   58,  106,  106,
      207,  107,  106,  107,  207,  182,  182,  107,  182,  260,

      107,  118,  260,  118,  118,  118,  118,  182,  186,  186,
      186,  186,  210,  107,  168,  107,  210,  118,  216,  107,
      216,  119,  119,  769,  107,  119,  119,  119,  119,  142,
      142,  142,  174,  118,  174,  142,  175,  175,  142,  118,
      142,  142,  142,  142,  142,  175,  221,  221,  768,  174,
      174,  176,  244,  176,  177,  177,  177,  177,  174,  261,
      244,  257,  175,  175,  767,  257,  175,  261,  176,  176,
      176,  176,  180,  274,  180,  174,  174,  274,  271,  174,
      187,  187,  187,  187,  177,  262,  271,  262,  306,  180,
      180,  180,  306,  323,  181,  181,  181,  323,  180,  185,

      185,  185,  185,  181,  245,  245,  245,  245,  766,  765,
      187,  276,  325,  185,  764,  180,  180,  276,  325,  180,
      181,  181,  276,  325,  181,  246,  246,  246,  246,  185,
      248,  248,  248,  248,  245,  185,  247,  247,  763,  246,
      247,  247,  247,  247,  310,  310,  310,  310,  311,  311,
      311,  311,  393,  762,  393,  246,  365,  365,  365,  365,
      248,  246,  398,  398,  405,  398,  403,  403,  761,  403,
      416,  416,  757,  416,  418,  418,  756,  418,  311,  405,
      405,  405,  405,  510,  755,  510,  365,  413,  413,  413,
      754,  413,  413,  413,  413,  747,  413,  413,  413,  413,

      413,  413,  413,  413,  413,  413,  430,  430,  641,  430,
      413,  413,  413,  413,  413,  413,  435,  435,  641,  435,
      450,  450,  641,  450,  454,  454,  456,  454,  455,  455,
      746,  455,  744,  743,  413,  413,  742,  413,  741,  738,
      737,  456,  456,  456,  456,  465,  465,  735,  465,  469,
      469,  734,  469,  470,  470,  733,  470,  732,  413,  413,
      447,  447,  447,  729,  447,  447,  447,  447,  728,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  471,
      471,  654,  471,  447,  447,  447,  447,  447,  447,  479,
      479,  654,  479,  485,  485,  654,  485,  493,  493,  727,

      493,  498,  498,  726,  498,  725,  724,  447,  447,  723,
      447,  503,  503,  722,  503,  508,  508,  721,  508,  509,
      509,  720,  509,  519,  519,  718,  519,  523,  523,  717,
      523,  447,  447,  466,  466,  466,  716,  466,  466,  466,
      466,  715,  466,  466,  466,  466,  466,  466,  466,  466,
      466,  466,  525,  525,  711,  525,  466,  466,  466,  466,
      466,  466,  526,  526,  710,  526,  539,  539,  709,  539,
      544,  552,  552,  708,  552,  557,  557,  707,  557,  706,
      466,  466,  566,  466,  705,  544,  544,  544,  544,  565,
      565,  704,  565,  566,  566,  566,  566,  577,  577,  703,

      577,  701,  700,  699,  466,  466,  467,  467,  467,  698,
      467,  467,  467,  467,  697,  467,  467,  467,  467,  467,
      467,  467,  467,  467,  467,  581,  581,  581,  581,  467,
      467,  467,  467,  467,  467,  593,  593,  625,  593,  613,
      613,  613,  613,  628,  628,  696,  628,  695,  625,  625,
      625,  625,  694,  467,  467,  693,  467,  633,  633,  672,
      633,  639,  639,  692,  639,  646,  646,  691,  646,  689,
      672,  672,  672,  672,  688,  687,  686,  467,  467,  499,
      499,  499,  685,  499,  499,  499,  499,  684,  499,  499,
      499,  499,  499,  499,  499,  499,  499,  499,  702,  702,

      683,  702,  499,  499,  499,  499,  499,  499,  713,  713,
      682,  713,  739,  739,  681,  739,  740,  740,  680,  740,
      745,  745,  679,  745,  678,  677,  499,  499,  676,  499,
      749,  749,  675,  749,  752,  752,  674,  752,  759,  759,
      673,  759,  776,  776,  671,  776,  777,  777,  670,  777,
      499,  499,  513,  513,  513,  669,  513,  513,  513,  513,
      668,  513,  513,  513,  513,  513,  513,  513,  513,  513,
      513,  779,  779,  667,  779,  513,  513,  513,  513,  513,
      513,  783,  783,  666,  783,  786,  786,  665,  786,  790,
      790,  664,  790,  793,  793,  663,  793,  662,  661,  513,

      513,  660,  513,  797,  797,  659,  797,  801,  801,  658,
      801,  804,  804,  657,  804,  810,  810,  656,  810,  812,
      812,  655,  812,  513,  513,  520,  520,  520,  653,  520,
      520,  520,  520,  652,  520,  520,  520,  520,  520,  520,
      520,  520,  520,  520,  651,  650,  649,  648,  520,  520,
      520,  520,  520,  520,  644,  643,  642,  637,  636,  635,
      634,  632,  631,  630,  629,  627,  626,  624,  623,  622,
      621,  618,  520,  520,  617,  520,  616,  615,  611,  609,
      608,  607,  606,  605,  604,  603,  602,  601,  599,  598,
      597,  595,  591,  590,  588,  587,  520,  520,  558,  558,

      558,  586,  558,  558,  558,  558,  585,  558,  558,  558,
      558,  558,  558,  558,  558,  558,  558,  584,  583,  582,
      580,  558,  558,  558,  558,  558,  558,  579,  578,  576,
      575,  574,  573,  572,  571,  570,  569,  568,  567,  562,
      561,  560,  555,  554,  553,  558,  558,  550,  558,  549,
      548,  547,  546,  545,  543,  542,  541,  540,  538,  537,
      536,  535,  534,  533,  532,  531,  530,  528,  527,  558,
      558,  559,  559,  559,  521,  559,  559,  559,  559,  517,
      559,  559,  559,  559,  559,  559,  559,  559,  559,  559,
      516,  515,  514,  512,  559,  559,  559,  559,  559,  559,

      511,  506,  505,  504,  501,  500,  496,  495,  494,  492,
      491,  490,  489,  488,  487,  486,  484,  483,  559,  559,
      482,  559,  481,  480,  478,  476,  475,  473,  472,  468,
      463,  462,  461,  460,  459,  458,  457,  453,  452,  451,
      449,  448,  559,  559,  594,  594,  594,  446,  594,  594,
      594,  594,  445,  594,  594,  594,  594,  594,  594,  594,
      594,  594,  594,  444,  443,  442,  441,  594,  594,  594,
      594,  594,  594,  440,  439,  438,  437,  436,  434,  432,
      431,  429,  428,  427,  426,  425,  424,  423,  422,  421,
      420,  594,  594,  419,  594,  415,  414,  412,  411,  410,

      409,  408,  407,  406,  404,  402,  400,  399,  397,  396,
      395,  394,  392,  391,  390,  594,  594,  614,  614,  614,
      389,  614,  614,  614,  614,  388,  614,  614,  614,  614,
      614,  614,  614,  614,  614,  614,  387,  386,  385,  384,
      614,  614,  614,  614,  614,  614,  383,  382,  381,  380,
      379,  378,  376,  375,  374,  373,  371,  370,  369,  368,
      367,  366,  364,  363,  614,  614,  362,  614,  361,  359,
      358,  357,  356,  355,  354,  353,  352,  351,  350,  349,
      348,  347,  346,  345,  344,  343,  342,  340,  614,  614,
      619,  619,  619,  339,  619,  619,  619,  619,  338,  619,

      619,  619,  619,  619,  619,  619,  619,  619,  619,  337,
      336,  335,  334,  619,  619,  619,  619,  619,  619,  333,
      332,  331,  330,  329,  328,  327,  326,  324,  322,  321,
      320,  319,  318,  317,  316,  315,  314,  619,  619,  313,
      619,  312,  309,  308,  307,  305,  288,  287,  286,  285,
      284,  283,  282,  281,  280,  279,  278,  277,  275,  273,
      272,  619,  619,  640,  640,  640,  270,  640,  640,  640,
      640,  269,  640,  640,  640,  640,  640,  640,  640,  640,
      640,  640,  268,  267,  266,  265,  640,  640,  640,  640,
      640,  640,  264,  263,  259,  258,  256,  255,  254,  253,

      252,  251,  250,  249,  243,  242,  240,  239,  238,  237,
      640,  640,  236,  640,  235,  234,  233,  232,  231,  230,
      229,  228,  227,  226,  225,  224,  223,  222,  220,  219,
      218,  217,  215,  212,  640,  640,  647,  647,  647,  211,
      647,  647,  647,  647,  209,  647,  647,  647,  647,  647,
      647,  647,  647,  647,  647,  208,  206,  205,  204,  647,
      647,  647,  647,  647,  647,  203,  202,  201,  198,  196,
      195,  194,  193,  191,  171,  165,  163,  153,  152,  151,
      150,  149,  148,  647,  647,  144,  647,  143,  136,  135,
      134,  133,  132,  127,  125,  122,  120,  102,  100,   87,

       79,   68,   61,   57,   54,   53,   52,  647,  647,  690,
      690,  690,   51,  690,  690,  690,  690,   49,  690,  690,
      690,  690,  690,  690,  690,  690,  690,  690,   47,   39,
       37,   35,  690,  690,  690,  690,  690,  690,   31,   27,
       23,   14,   13,    8,    7,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  690,  690,    0,  690,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      690,  690,  714,  714,  714,    0,  714,  714,  714,  714,
        0,  714,  714,  714,  714,  714,  714,  714,  714,  714,

      714,    0,    0,    0,    0,  714,  714,  714,  714,  714,
      714,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  714,
      714,    0,  714,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  714,  714,  730,  730,  730,    0,  730,
      730,  730,  730,    0,  730,  730,  730,  730,  730,  730,
      730,  730,  730,  730,    0,    0,    0,    0,  730,  730,
      730,  730,  730,  730,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  730,  730,    0,  730,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  730,  730,  731,  731,
      731,    0,  731,  731,  731,  731,    0,  731,  731,  731,
      731,  731,  731,  731,  731,  731,  731,    0,    0,    0,
        0,  731,  731,  731,  731,  731,  731,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  731,  731,    0,  731,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  731,

      731,  736,  736,  736,    0,  736,  736,  736,  736,    0,
      736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
        0,    0,    0,    0,  736,  736,  736,  736,  736,  736,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  736,  736,
        0,  736,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  736,  736,  750,  750,  750,    0,  750,  750,
      750,  750,    0,  750,  750,  750,  750,  750,  750,  750,
      750,  750,  750,    0,    0,    0,    0,  750,  750,  750,

      750,  750,  750,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  750,  750,    0,  750,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  750,  750,  753,  753,  753,
        0,  753,  753,  753,  753,    0,  753,  753,  753,  753,
      753,  753,  753,  753,  753,  753,    0,    0,    0,    0,
      753,  753,  753,  753,  753,  753,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  753,  753,    0,  753,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  753,  753,
      760,  760,  760,    0,  760,  760,  760,  760,    0,  760,
      760,  760,  760,  760,  760,  760,  760,  760,  760,    0,
        0,    0,    0,  760,  760,  760,  760,  760,  760,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  760,  760,    0,
      760,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  760,  760,  770,  770,  770,    0,  770,  770,  770,

      770,    0,  770,  770,  770,  770,  770,  770,  770,  770,
      770,  770,    0,    0,    0,    0,  770,  770,  770,  770,
      770,  770,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      770,  770,    0,  770,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  770,  770,  771,  771,  771,    0,
      771,  771,  771,  771,    0,  771,  771,  771,  771,  771,
      771,  771,  771,  771,  771,    0,    0,    0,    0,  771,
      771,  771,  771,  771,  771,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  771,  771,    0,  771,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  771,  771,  773,
      773,  773,    0,  773,  773,  773,  773,    0,  773,  773,
      773,  773,  773,  773,  773,  773,  773,  773,    0,    0,
        0,    0,  773,  773,  773,  773,  773,  773,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  773,  773,    0,  773,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      773,  773,  781,  781,  781,    0,  781,  781,  781,  781,
        0,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      781,    0,    0,    0,    0,  781,  781,  781,  781,  781,
      781,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  781,
      781,    0,  781,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  781,  781,  784,  784,  784,    0,  784,
      784,  784,  784,    0,  784,  784,  784,  784,  784,  784,

      784,  784,  784,  784,    0,    0,    0,    0,  784,  784,
      784,  784,  784,  784,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  784,  784,    0,  784,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  784,  784,  787,  787,
      787,    0,  787,  787,  787,  787,    0,  787,  787,  787,
      787,  787,  787,  787,  787,  787,  787,    0,    0,    0,
        0,  787,  787,  787,  787,  787,  787,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  787,  787,    0,  787,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  787,
      787,  791,  791,  791,    0,  791,  791,  791,  791,    0,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  791,
        0,    0,    0,    0,  791,  791,  791,  791,  791,  791,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  791,  791,
        0,  791,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  791,  791,  798,  798,  798,    0,  798,  798,
      798,  798,    0,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  798,    0,    0,    0,    0,  798,  798,  798,
      798,  798,  798,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  798,  798,    0,  798,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  798,  798,  799,  799,  799,
        0,  799,  799,  799,  799,    0,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,    0,    0,    0,    0,

      799,  799,  799,  799,  799,  799,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  799,  799,    0,  799,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  799,  799,
      805,  805,  805,    0,  805,  805,  805,  805,    0,  805,
      805,  805,  805,  805,  805,  805,  805,  805,  805,    0,
        0,    0,    0,  805,  805,  805,  805,  805,  805,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  805,  805,    0,

      805,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  805,  805,  809,  809,  809,    0,  809,  809,  809,
      809,    0,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  809,    0,    0,    0,    0,  809,  809,  809,  809,
      809,  809,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      809,  809,    0,  809,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  809,  809,  813,  813,  813,    0,

      813,  813,  813,  813,    0,  813,  813,  813,  813,  813,
      813,  813,  813,  813,  813,    0,    0,    0,    0,  813,
      813,  813,  813,  813,  813,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  813,  813,    0,  813,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  813,  813,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  816,  816,
      816,  816,  816,  816,  816,  816,  816,  817,  817,  817,
      817,  817,  817,  817,  817,  817,  818,  818,  818,  818,

      818,  818,  818,  818,  818,  819,  819,  819,  819,  819,
      819,  819,  819,  819,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  821,  821,  821,  821,  821,  821,  821,
      821,  821,  822,  822,  822,  822,  822,  822,  822,  822,
      822,  823,  823,  823,  823,  823,  823,  823,  823,  823,
      824,  824,    0,  824,  824,  825,  825,    0,  825,  825,
      826,    0,    0,    0,  826,  826,  826,  826,  826,  827,
      827,    0,    0,    0,    0,  827,  827,  828,  828,  828,
        0,  828,  828,  828,  828,  828,  829,    0,    0,    0,
      829,  829,  829,  829,  829,  830,    0,    0,    0,  830,

      830,  830,  830,  830,  831,  831,    0,  831,  831,  832,
      832,  833,    0,    0,  833,  833,  833,  834,  834,  834,
        0,  834,  834,  834,  834,  834,  835,  835,    0,  835,
      835,  836,  836,    0,  836,  836,  837,  837,  837,    0,
      837,  837,  837,  837,  837,  838,  838,  838,  838,  838,
      838,  838,  838,  838,  839,  839,  839,    0,  839,  839,
      839,  839,  839,  840,  840,  840,    0,  840,  840,  840,
      840,  840,  841,  841,  841,    0,  841,  841,  841,  841,
      841,  842,  842,  842,    0,  842,  842,  842,  842,  842,
      843,  843,  843,    0,  843,  843,  843,  843,  843,  844,

      844,  844,    0,  844,  844,  844,  844,  844,  845,  845,
      845,    0,  845,  845,  845,  845,  845,  846,  846,  846,
        0,  846,  846,  846,  846,  846,  847,  847,  847,    0,
      847,  847,  847,  847,  847,  848,  848,  848,    0,  848,
      848,  848,  848,  848,  849,  849,  849,    0,  849,  849,
      849,  849,  849,  850,  850,  850,    0,  850,  850,  850,
      850,  850,  851,  851,  851,    0,  851,  851,  851,  851,
      851,  852,  852,  852,  852,  852,  852,  852,  852,  852,
      853,  853,  853,    0,  853,  853,  853,  853,  853,  854,
      854,    0,  854,  854,  855,  855,  855,    0,  855,  855,

      855,  855,  855,  856,  856,  856,    0,  856,  856,  856,
      856,  856,  857,  857,  857,    0,  857,  857,  857,  857,
      857,  858,  858,    0,  858,  858,  859,  859,  859,    0,
      859,  859,  859,  859,  859,  860,  860,  860,    0,  860,
      860,  860,  860,  860,  861,  861,    0,  861,  861,  862,
      862,  862,    0,  862,  862,  862,  862,  862,  863,  863,
      863,    0,  863,  863,  863,  863,  863,  864,  864,    0,
      864,  864,  865,  865,    0,  865,  865,  866,  866,  866,
        0,  866,  866,  866,  866,  866,  867,  867,  867,    0,
      867,  867,  867,  867,  867,  868,  868,  868,    0,  868,

      868,  868,  868,  868,  869,  869,  869,    0,  869,  869,
      869,  869,  869,  870,  870,  870,    0,  870,  870,  870,
      870,  870,  871,  871,  871,    0,  871,  871,  871,  871,
      871,  872,  872,  872,    0,  872,  872,  872,  872,  872,
      873,  873,  873,    0,  873,  873,  873,  873,  873,  874,
      874,  874,    0,  874,  874,  874,  874,  874,  875,  875,
      875,    0,  875,  875,  875,  875,  875,  876,  876,  876,
        0,  876,  876,  876,  876,  876,  877,  877,  877,    0,
      877,  877,  877,  877,  877,  878,  878,  878,    0,  878,
      878,  878,  878,  878,  879,  879,  879,    0,  879,  879,

      879,  879,  879,  880,  880,  880,    0,  880,  880,  880,
      880,  880,  881,  881,  881,    0,  881,  881,  881,  881,
      881,  882,  882,  882,    0,  882,  882,  882,  882,  882,
      883,  883,  883,    0,  883,  883,  883,  883,  883,  884,
      884,  884,    0,  884,  884,  884,  884,  884,  885,  885,
      885,    0,  885,  885,  885,  885,  885,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,

      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814,  814,  814,  814,  814,  814,  814,  814,  814,  814,
      814
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lex.l"
#line 3 "lex.l"

# include  <iostream>
# include <string>
#include <ctype.h>
#include <stack>
#include "parsehelp.h"
#include "ifdefproc.h"
#include "parser.tab.hh"

#ifdef YY_BUF_SIZE
#undef YY_BUF_SIZE
#endif
#define YY_BUF_SIZE 2048000

extern int lexor_keyword_handler(const char*str, unsigned nstr);
extern void yyerror(char const*);
#define KEYWORD_LOOKUP lexor_keyword_handler(yytext, yyleng)
using std::cerr;
using std::endl;
using std::stack;
struct YYLTYPE
    {
        int first_line;
        char *text;
};

struct YYLTYPE yylloc;
void line_directive(){}
void line_directive2() {}
stack<YY_BUFFER_STATE> bufferStates;
void createBufferState();
void switchToPreviousBufferState();












 
#line 1607 "lex.yy.cc"

#define INITIAL 0
#define CCOMMENT 1
#define PCOMMENT 2
#define LCOMMENT 3
#define CSTRING 4
#define UDPTABLE 5
#define PPTIMESCALE 6
#define PPDEFAULT_NETTYPE 7
#define SKIPMOD 8
#define INCLUDE 9
#define TICKDEF 10
#define SKIPDEF 11
#define SKIPTIMINGCMDS 12

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 54 "lex.l"


#line 1807 "lex.yy.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 815 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3658 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 56 "lex.l"
{ line_directive(); }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 57 "lex.l"
{ line_directive2(); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 59 "lex.l"
{ ; }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 60 "lex.l"
{ OMCreator::instance()->incLine(); }
	YY_BREAK
/* C++ style comments start with / / and run to the end of the
     current line. These are very easy to handle. */
case 5:
YY_RULE_SETUP
#line 65 "lex.l"
{ /*comment_enter = YY_START; BEGIN(LCOMMENT);*/ }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "lex.l"
{ yymore(); }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 67 "lex.l"
{  /*BEGIN(comment_enter);*/ }
	YY_BREAK
/* The contents of C-style comments are ignored, like white space. */
case 8:
YY_RULE_SETUP
#line 72 "lex.l"
{ BEGIN(CCOMMENT); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 73 "lex.l"
{ yymore(); }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 74 "lex.l"
{ OMCreator::instance()->incLine();  yymore(); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 75 "lex.l"
{ BEGIN(0); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 77 "lex.l"
{ yymore(); BEGIN 0;}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 78 "lex.l"
{OMCreator::instance()->incLine(); yymore();}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 79 "lex.l"
{yymore(); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 81 "lex.l"
{ return VLOG_PSTAR; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 82 "lex.l"
{ return VLOG_STARP; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 83 "lex.l"
{ return VLOG_LS; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 84 "lex.l"
{ return VLOG_LS; /* Note: Functionally, <<< is the same as <<. */}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 85 "lex.l"
{ return VLOG_RS; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 86 "lex.l"
{ return VLOG_RSS; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 87 "lex.l"
{ return VLOG_LE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 88 "lex.l"
{ return VLOG_GE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 89 "lex.l"
{ return VLOG_EG; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 90 "lex.l"
{ return VLOG_SG; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 91 "lex.l"
{ return VLOG_EQ; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 92 "lex.l"
{ return VLOG_NE; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 93 "lex.l"
{ return VLOG_CEQ; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 94 "lex.l"
{ return VLOG_CNE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 95 "lex.l"
{ return VLOG_LOR; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 96 "lex.l"
{ return VLOG_LAND; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 97 "lex.l"
{ return VLOG_TAND; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 98 "lex.l"
{ return VLOG_NOR; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 99 "lex.l"
{ return VLOG_NXOR; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 100 "lex.l"
{ return VLOG_NXOR; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 101 "lex.l"
{ return VLOG_NAND; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 102 "lex.l"
{ return VLOG_TRIGGER; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 103 "lex.l"
{ return VLOG_PO_POS; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 104 "lex.l"
{ return VLOG_PO_NEG; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 106 "lex.l"
{ return '*'; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 107 "lex.l"
{ return VLOG_POW;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 110 "lex.l"
{ return yytext[0]; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 112 "lex.l"
{ BEGIN(CSTRING); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 113 "lex.l"
{ yymore(); }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 114 "lex.l"
{ BEGIN(0);
                yylval.text = strdup(yytext);
        return STRING; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 117 "lex.l"
{ BEGIN(0);
        yylval.text = strdup(yytext);
        yylval.text[strlen(yytext)-1] = 0;
        return STRING; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 121 "lex.l"
{ yymore(); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 123 "lex.l"
{ return '_'; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 124 "lex.l"
{ return '+'; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 125 "lex.l"
{ return '%'; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 126 "lex.l"
{ return '*'; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 127 "lex.l"
{ return 'r'; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 128 "lex.l"
{ return 'Q'; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 129 "lex.l"
{ return 'q'; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 130 "lex.l"
{ return 'f'; /* b0 is 10|00, but only 10 is meaningful */}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 131 "lex.l"
{ return 'r'; /* b1 is 11|01, but only 01 is meaningful */}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 132 "lex.l"
{ return 'P'; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 133 "lex.l"
{ return 'f'; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 134 "lex.l"
{ return 'M'; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 135 "lex.l"
{ return 'N'; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 136 "lex.l"
{ return 'F'; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 137 "lex.l"
{ return 'R'; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 138 "lex.l"
{ return 'B'; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 139 "lex.l"
{ return 'b'; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 140 "lex.l"
{ return 'l'; /* IVL extension */ }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 141 "lex.l"
{ return 'h'; /* IVL extension */ }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 142 "lex.l"
{ return 'f'; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 143 "lex.l"
{ return 'r'; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 144 "lex.l"
{ return 'x'; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 145 "lex.l"
{ return 'n'; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 146 "lex.l"
{ return 'p'; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 147 "lex.l"
{ return yytext[0]; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 148 "lex.l"
{ return VLOG_automatic;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 149 "lex.l"
{ return VLOG_generate;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 150 "lex.l"
{ return VLOG_endgenerate;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 151 "lex.l"
{ return VLOG_genvar;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 152 "lex.l"
{ 
          yylval.text = strdup(yytext);
          return PATHPULSE_IDENTIFIER; 
}		  
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 156 "lex.l"
{ 
        int token = KEYWORD_LOOKUP;
		if((token == VLOG_module) && OMCreator::instance()->
			getCurrFile()->isLibFile()){
			if(!skipMod()){
				return VLOG_module;
			}
		}
		else if(token == VLOG_table){
			BEGIN UDPTABLE;
			return token;
		}
		else if(token == VLOG_endtable) {
		    BEGIN 0;
			return token;
		}	
		else {
			if(token == VLOG_if) {
				handleGenIf();
			}
	    	yylval.text = strdup(yytext);		
        	return token ? token : IDENTIFIER;
		}
}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 182 "lex.l"
{
      return IDENTIFIER; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 185 "lex.l"
{
      if(isSystemTimingCheckCommand(yytext)) {
	      BEGIN SKIPTIMINGCMDS;
	  }
	  else 
	  {
          yylval.text = strdup(yytext);
          return SYSTEM_IDENTIFIER; 
	  }
}	  
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 197 "lex.l"
{
    setNumString();
    return BASED_NUMBER; 
}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 201 "lex.l"
{ 
    setNumString();
    return BASED_NUMBER;
 }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 205 "lex.l"
{ 
    setNumString();
    return BASED_NUMBER;
}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 209 "lex.l"
{ 
    setNumString();
    return BASED_NUMBER;
}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 214 "lex.l"
{
    setNumString();
    return DEC_NUMBER; 
}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 219 "lex.l"
{
	yylval.text = strdup(yytext);
    return REALTIME; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 223 "lex.l"
{
	yylval.text = strdup(yytext);
    return REALTIME; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 227 "lex.l"
{
				string str(yytext);
				str = str.substr(1, str.size()-2);
                OMCreator::instance()->parseSetup(str);
                BEGIN 0;
              }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 233 "lex.l"
{
                OMCreator::instance()->parseSetup(yytext);
                BEGIN 0;
              }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 237 "lex.l"
{OMCreator::instance()->incLine();}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 240 "lex.l"
{BEGIN INCLUDE;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 242 "lex.l"
{ return DEFAULT_NETTYPE;}
	YY_BREAK
/* Notice and handle the timescale directive. */
case 92:
YY_RULE_SETUP
#line 246 "lex.l"
{ OMCreator::instance()->incLine(); BEGIN(PPTIMESCALE); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 247 "lex.l"
{ }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 248 "lex.l"
{
      BEGIN(0); }
	YY_BREAK
/* These are directives that I do not yet support. I think that IVL
     should handle these, not an external preprocessor. */
case 95:
YY_RULE_SETUP
#line 255 "lex.l"
{  }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 256 "lex.l"
{  }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 257 "lex.l"
{  }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 258 "lex.l"
{  }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 259 "lex.l"
{  }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 260 "lex.l"
{  }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 261 "lex.l"
{  }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 262 "lex.l"
{  }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 263 "lex.l"
{  }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 264 "lex.l"
{  }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 265 "lex.l"
{  }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 266 "lex.l"
{  }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 267 "lex.l"
{  }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 268 "lex.l"
{  }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 269 "lex.l"
{  }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 272 "lex.l"
{
    string str(yytext);
	if(!TickDefine::instance()->process(str.substr(str.find_first_of('`')+7))) {
	    yyerror("error processing `define");
	}	
  }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 279 "lex.l"
{ BEGIN 0; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 280 "lex.l"
{ }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 282 "lex.l"
{ if(!processIfdef(0)) { BEGIN 0; } }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 283 "lex.l"
{ if(!processIfdef(1)) { BEGIN 0; } }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 284 "lex.l"
{ if(!processIfdef(2)) { BEGIN 0; } }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 285 "lex.l"
{ if(!processIfdef(3)) { BEGIN 0; } }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 286 "lex.l"
{ IfdefProc::instance()->processEndif(); BEGIN 0; }
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 287 "lex.l"
{ OMCreator::instance()->incLine();; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 288 "lex.l"
{ }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 290 "lex.l"
{ processIfdef(0); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 291 "lex.l"
{ processIfdef(1); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 292 "lex.l"
{ processIfdef(2); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 293 "lex.l"
{ processIfdef(3); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 294 "lex.l"
{ IfdefProc::instance()->processEndif(); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 296 "lex.l"
{
    processUndef();
  }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 301 "lex.l"
{ std::cerr << yylloc.text << ":" << yylloc.first_line << ": error: "
        << "Stray tic (`) here. Perhaps you put white space" << endl;
       std::cerr << yylloc.text << ":" << yylloc.first_line << ":      : "
        << "between the tic and preprocessor directive?"
        << endl;
       //error_count += 1;
     }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 308 "lex.l"
{ 
    yyless(1);
	BEGIN TICKDEF;
	}	 
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 312 "lex.l"
{ 
        if(!TickDefine::instance()->isDefined(yytext)) {
		    yyerror("undefined tick variable found");
		}
		else
		{
            std::string str = TickDefine::instance()->getRepText(yytext);
			std::reverse(str.begin(), str.end());
	        for(int i = 0; i < str.size(); ++i) {
	            unput(str[i]);
	        }
		}	
		BEGIN 0;
	}	
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 326 "lex.l"
{ 
        if(!TickDefine::instance()->isDefined(yytext+1)) {
		    yyerror("undefined tick variable found");
		}
		else
		{
            std::string str = TickDefine::instance()->getRepText(yytext+1);
			std::reverse(str.begin(), str.end());
	        for(int i = 0; i < str.size(); ++i) {
	            unput(str[i]);
	        }
		}	
	}	
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 339 "lex.l"
{ yyless(0); BEGIN 0; }	
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 342 "lex.l"
{   std::cerr << yylloc.text << ":" << yylloc.first_line
       << ": error: unmatched character (";
      if (isgraph(yytext[0]))
        std::cerr << yytext[0];
     // else
//        std::cerr << "hex " << hex << (0xffU & ((unsigned) (yytext[0])));

      std::cerr << ")" << endl;
      //error_count += 1; 
    }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 353 "lex.l"
ECHO;
	YY_BREAK
#line 2692 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CCOMMENT):
case YY_STATE_EOF(PCOMMENT):
case YY_STATE_EOF(LCOMMENT):
case YY_STATE_EOF(CSTRING):
case YY_STATE_EOF(UDPTABLE):
case YY_STATE_EOF(PPTIMESCALE):
case YY_STATE_EOF(PPDEFAULT_NETTYPE):
case YY_STATE_EOF(SKIPMOD):
case YY_STATE_EOF(INCLUDE):
case YY_STATE_EOF(TICKDEF):
case YY_STATE_EOF(SKIPDEF):
case YY_STATE_EOF(SKIPTIMINGCMDS):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 815 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 815 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 814);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 353 "lex.l"



int yywrap()
{
    MsgHandler::instance()->print(3, 
	    OMCreator::instance()->getCurrFile()->getFileTypeStr().c_str(), 
		OMCreator::instance()->getCurrFile()->getName().c_str());
	return OMCreator::instance()->parseSetup();
      //return 1;
}

bool
skipMod()
{
    yylex();
    if(SemCheck::instance()->isUndefMod(yytext))
    {
        yyless(0);
        return false;
    }

    while(strcmp(yytext, "endmodule")){
        yylex();
    }
    return true;
}

void
skipUpto(const std::vector<std::string>& tokens)
{
    bool done = false;
	do {
	    yylex();
		for(int i = 0; i < tokens.size(); ++i) 
		{
		    if(tokens[i] == std::string(yytext))
			{
			    yyless(0);
				return;
			}
		}
	} while(!done);    
}
void
handleGenIf()
{
	//if(OMCreator::instance()->getCurrGenStmt() && 
	//    !OMCreator::instance()->getCurrGenDecl()){
	//	OMCreator::instance()->createGenCond(0);
	//}
}

void
createBufferState()
{
    bufferStates.push(YY_CURRENT_BUFFER);
    yy_switch_to_buffer(yy_create_buffer(yyin,YY_BUF_SIZE ));
}

void
switchToPreviousBufferState() 
{
    yy_delete_buffer(YY_CURRENT_BUFFER);
    yy_switch_to_buffer(bufferStates.top());
    bufferStates.pop();
}

int
processIfdef(int what)
{
    //what: 0 ->ifdef, 1->ifndef, 2->elsif, 3->else
	int size = (what == 3) ? 5 : ((what == 0) || (what == 2)) ? 6 :  7;

    string str(yytext); 
	if(what != 3)
	{
	    str = str.substr(str.find_first_of("`"));
	    str = str.substr(size); 
	    str = str.substr(str.find_first_not_of(" \t\b\r"));
	    str = str.substr(0, str.find_first_of(" \t\b\r\n"));
	}	

	int status = (what == 0) ? IfdefProc::instance()->processIfdef(str) :
	    (what == 1) ? IfdefProc::instance()->processIfndef(str) :
		(what == 2) ? IfdefProc::instance()->processElsif(str) :
		IfdefProc::instance()->processElse();
	if(status) {
	    BEGIN SKIPDEF;
	}	
	return status;	
}

void processUndef()
{
    string str(yytext); 
    str = str.substr(str.find_first_of("`"));
    str = str.substr(6); 
    str = str.substr(str.find_first_not_of(" \t\b\r"));
    str = str.substr(0, str.find_first_of(" \t\b\r\n"));
	if(!TickDefine::instance()->undef(str)) {
	    MsgHandler::instance()->print(73, OMCreator::instance()->getLine(),
		str.c_str());
	}	
}

bool isSystemTimingCheckCommand(const char *text)
{
      if ((strcmp(text,"$setuphold") == 0) ||
          (strcmp(text,"$attribute") == 0) ||
          (strcmp(text,"$hold") == 0) || 
          (strcmp(text,"$period") == 0) ||
          (strcmp(text,"$recovery") == 0) || 
          (strcmp(text,"$recrem") == 0) ||
          (strcmp(text,"$setup") == 0) || 
          (strcmp(text,"$width") == 0) ||
          (strcmp(text,"$removal") == 0) ||
          (strcmp(text,"$skew") == 0) ||
          (strcmp(text,"$timeskew") == 0) ||
          (strcmp(text,"$fullskew") == 0) ||
          (strcmp(text,"$nochange") == 0) ) {
		  return true;
	   }
	   return false;
}

void setNumString()
{
    yylval.text = strdup(yytext);
	int len = strlen(yylval.text);
	int firstix = 0;
	for(int secondix = 0; secondix < len; ++secondix)
	{
	    //remove useless '_'
	    if(yylval.text[secondix] != '_') {
		    yylval.text[firstix++] = yylval.text[secondix];
		}	
	}
	yylval.text[firstix] = '\0';
}



